<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="HW2" xmlns:jacoco="antlib:org.jacoco.ant">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="${env.ECLIPSE_HOME}"/>
	<property name="JACOCO_HOME" value="${env.JACOCO_HOME}"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
	<property name="test.dir" location="src" />
		<property name="report.dir" location="report" /> 
		<property name="FINDBUGS_HOME" value="${env.FINDBUGS_HOME}" />
		<property name="report.findbugs.dir" location="${report.dir}/findbugs" />
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="${ECLIPSE_HOME}/plugins/org.junit_4.11.0.v201303080030/junit.jar"/>
        <pathelement location="${ECLIPSE_HOME}/plugins/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <path id="HW2.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="test">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project,run,RectangleTest,TriangleTest,findbugs,jacocoReport" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="test"/>
            <classpath refid="HW2.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
	 <target name="run">
	        <java classname="Main" failonerror="true" fork="yes">
	            <classpath refid="HW2.classpath"/>
	        </java>
	    </target>
	<target name="HW2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="RectangleTest" todir="${junit.output.dir}"/>
            <test name="TriangleTest" todir="${junit.output.dir}"/>
            <classpath refid="HW2.classpath"/>
        </junit>
    </target>
    <target name="JUnitCore">
        <java classname="org.junit.runner.JUnitCore" failonerror="true" fork="yes">
            <classpath refid="HW2.classpath"/>
        </java>
    </target>
    <target name="Main">
        <java classname="Main" failonerror="true" fork="yes">
            <classpath refid="HW2.classpath"/>
        </java>
    </target>
    <target name="RectangleTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="RectangleTest" todir="${junit.output.dir}"/>
            <classpath refid="HW2.classpath"/>
        </junit>
    </target>
    <target name="RectangleTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="RectangleTest" todir="${junit.output.dir}"/>
            <test name="TriangleTest" todir="${junit.output.dir}"/>
            <classpath refid="HW2.classpath"/>
        </junit>
    </target>
    <target name="test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="RectangleTest" todir="${junit.output.dir}"/>
            <test name="TriangleTest" todir="${junit.output.dir}"/>
            <classpath refid="HW2.classpath"/>
        </junit>
    </target>
    <target name="TriangleTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="TriangleTest" todir="${junit.output.dir}"/>
            <classpath refid="HW2.classpath"/>
        </junit>
    </target>
    <target name="TriangleTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="RectangleTest" todir="${junit.output.dir}"/>
            <test name="TriangleTest" todir="${junit.output.dir}"/>
            <classpath refid="HW2.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
	<target name="findbugs"
		            description="Run code analysis over code to check for problems."
		    >
		        <!-- Fail this target if FindBugs is not installed. -->
		        <available file="${env.FINDBUGS_HOME}/lib/findbugs.jar" property="findbugs.available" />
		        <fail unless="findbugs.available"
		              message="Error: FINDBUGS_HOME not set or findbugs.jar not found."
		        />
		        <taskdef name="findbugs"
		                 classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		                 classpath="${env.FINDBUGS_HOME}/lib/findbugs-ant.jar"
		        />

		        <!-- Run FindBugs. -->
		        <mkdir dir="${report.findbugs.dir}" />
		        <findbugs home="${env.FINDBUGS_HOME}"
		                  workHard="true"
		                  output="xml:withMessages"
		                  outputFile="${report.findbugs.dir}/findbugs.xml"
		        >
		            <class location="bin" />
		            <auxClasspath>
		                <fileset file="${ECLIPSE_HOME}/plugins/org.junit_4.11.0.v201303080030/junit.jar" />
		            </auxClasspath>
		        </findbugs>
		    </target>
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
				        <classpath path="${env.JACOCO_HOME}/lib/jacocoant.jar"/>
				    </taskdef>
	<property name="exec.file" location="jacoco.exec"/>
		<target name="jacocoCoverage">
			<jacoco:coverage>
						    <java classname="Main" fork="true">
						        <classpath>
						            <pathelement location="./bin"/>
						        </classpath>
						    </java>
						</jacoco:coverage>
			</target>
				<target name="jacocoReport" depends="jacocoCoverage">
					<!--  Step 3: Create coverage report  -->
					<jacoco:report>
					<!--
					 This task needs the collected execution data and ... 
					-->
					<executiondata>
					<file file="${exec.file}"/>
					</executiondata>
					<!--  the class files and optional source files ...  -->
					<structure name="JaCoCo Ant Example">
					<classfiles>
					<fileset dir="./bin">
					<exclude name="**/MainClass.class"/>
					</fileset>
					</classfiles>
					<sourcefiles encoding="UTF-8">
					<fileset dir="src"/>
					</sourcefiles>
					</structure>
					<!--  to produce reports in different formats.  -->
					<html destdir="test"/>
					<csv destfile="jacocoreport.csv"/>
					<xml destfile="$jacocoreport.xml"/>
					</jacoco:report>
					</target>
</project>
